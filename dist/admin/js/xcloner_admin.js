/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./admin/js/xcloner-admin.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./admin/js/xcloner-admin.js":
/*!***********************************!*\
  !*** ./admin/js/xcloner-admin.js ***!
  \***********************************/
/*! exports provided: error_modal, next_tab, doShortText, show_ajax_error, ID, getUrlParam */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"error_modal\", function() { return error_modal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"next_tab\", function() { return next_tab; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doShortText\", function() { return doShortText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"show_ajax_error\", function() { return show_ajax_error; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ID\", function() { return ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUrlParam\", function() { return getUrlParam; });\n/* harmony import */ var _xcloner_remote_storage_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xcloner-remote-storage-class */ \"./admin/js/xcloner-remote-storage-class.js\");\n/* harmony import */ var _xcloner_backup_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xcloner-backup-class */ \"./admin/js/xcloner-backup-class.js\");\n/* harmony import */ var _xcloner_manage_backups_class__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xcloner-manage-backups-class */ \"./admin/js/xcloner-manage-backups-class.js\");\nlet error_modal;\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var Modalelem = document.querySelector(\"#error_modal\");\n  error_modal = M.Modal.init(Modalelem);\n});\n\n(function ($) {\n  \"use strict\";\n\n  jQuery(document).ready(function () {\n    jQuery(\".tooltipped\").tooltip();\n    jQuery(\".collapsible\").collapsible();\n\n    jQuery(\"span.shorten_string\").click(function () {\n      jQuery(this).toggleClass(\"full\");\n      doShortText(jQuery(this));\n    });\n\n    jQuery(\"span.shorten_string\").each(function () {\n      doShortText(jQuery(this));\n    });\n\n    jQuery(\"#xcloner_regex_exclude\").on(\"focus\", function () {\n      jQuery(\"ul.xcloner_regex_exclude_limit li\").fadeIn();\n    });\n\n    jQuery(\".regex_pattern\").on(\"click\", function () {\n      jQuery(this).select();\n    });\n\n    jQuery(\".btn.system_info_toggle\").on(\"click\", function () {\n      jQuery(\".additional_system_info\").toggle();\n    });\n\n    jQuery(\"a.download-logger\").on(\"click\", function (e) {\n      var xcloner_manage_backups = new _xcloner_manage_backups_class__WEBPACK_IMPORTED_MODULE_2__[\"Xcloner_Manage_Backups\"]();\n\n      var hash = jQuery(this).attr(\"href\");\n      var id = hash.substr(1);\n\n      if (id) {\n        xcloner_manage_backups.download_backup_by_name(id);\n      }\n\n      e.preventDefault();\n    });\n\n    jQuery(\".nav-tab-wrapper.content li\").on(\"click\", function (e) {\n      jQuery(\".nav-tab-wrapper li a\").removeClass(\"nav-tab-active\");\n      jQuery(this).find(\"a\").addClass(\"nav-tab-active\");\n      jQuery(\".nav-tab-wrapper-content .tab-content\").removeClass(\"active\");\n      jQuery(\n        \".nav-tab-wrapper-content \" + jQuery(this).find(\"a\").attr(\"href\")\n      ).addClass(\"active\");\n\n      e.preventDefault();\n\n      location.hash = jQuery(this).find(\"a\").attr(\"href\") + \"_hash\";\n    });\n\n    var hash = window.location.hash;\n    if (hash) {\n      next_tab(hash.replace(\"_hash\", \"\"));\n    }\n  });\n})(jQuery);\n\n//jQuery( document ).ajaxError(function(err, request) {\n//show_ajax_error(\"dd\", \"dd12\", request)\n//});\n\nconst next_tab = function (hash) {\n  jQuery(\".nav-tab-wrapper\")\n    .find(\"li a[href='\" + hash + \"']\")\n    .trigger(\"click\");\n  location.hash = hash;\n};\n\nconst doShortText = function (elem) {\n  if (elem.hasClass(\"full\")) {\n    elem.text(elem.attr(\"data-text\"));\n    return;\n  }\n  var text = elem.text();\n  var text_lenght = text.length;\n  var first = text.substr(0, 10);\n  var last = text.substr(text_lenght - 20, text_lenght);\n\n  elem.attr(\"data-text\", text).text(first + \"...\" + last);\n};\n\n/** global: xcloner_backup */\nconst show_ajax_error = function (title, msg, json) {\n  //var json = jQuery.parseJSON( body )\n\n  if (typeof xcloner_backup !== \"undefined\") {\n    xcloner_backup.cancel_backup();\n  }\n\n  if (json && json.responseText !== undefined) {\n    msg = msg + \": \" + json.responseText;\n  }\n\n  jQuery(\"#error_modal .title\").text(title);\n  jQuery(\"#error_modal .msg\").text(msg);\n\n  if (json && json.status) {\n    jQuery(\"#error_modal .status\").text(json.status + \" \" + json.statusText);\n  }\n\n  jQuery(\"#error_modal .body\").text(JSON.stringify(json));\n  //var error_modal = jQuery(\"#error_modal\").modal();\n  error_modal.open();\n};\n\nconst ID = function () {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n};\n\nconst getUrlParam = function (name) {\n  return (location.search.split(name + \"=\")[1] || \"\").split(\"&\")[0];\n};\n\n\n\n\n\njQuery(document).ready(function () {\n  // define global variables\n  window.remote_storage = new _xcloner_remote_storage_class__WEBPACK_IMPORTED_MODULE_0__[\"Xcloner_Remote_Storage\"]();\n  window.xcloner_backup = new _xcloner_backup_class__WEBPACK_IMPORTED_MODULE_1__[\"Xcloner_Backup\"]();\n  window.xcloner_manage_backups = new _xcloner_manage_backups_class__WEBPACK_IMPORTED_MODULE_2__[\"Xcloner_Manage_Backups\"]();\n\n  window.ID = ID;\n  window.getUrlParam = getUrlParam;\n  window.show_ajax_error = show_ajax_error;\n  window.doShortText = doShortText;\n  window.dataTable              = null;\n  window.next_tab               = next_tab;\n});\n\n\n//# sourceURL=webpack:///./admin/js/xcloner-admin.js?");

/***/ }),

/***/ "./admin/js/xcloner-backup-class.js":
/*!******************************************!*\
  !*** ./admin/js/xcloner-backup-class.js ***!
  \******************************************/
/*! exports provided: Xcloner_Backup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Xcloner_Backup\", function() { return Xcloner_Backup; });\n\nclass Xcloner_Backup {\n  constructor() {\n    this.cancel = 0;\n    this.params;\n    this.generate_hash = false;\n    this.last_dumpfile = \"\";\n    this.last_backup_file = \"\";\n    this.backup_part = 0;\n    this.backup_size_total = 0;\n    this.resume = new Object();\n  }\n\n  get_form_params() {\n    var table_params = [];\n    var files_params = [];\n    var extra = [];\n\n    jQuery.each(\n      jQuery(\"#jstree_database_container\").jstree(\"get_checked\", true),\n      function () {\n        var object = new Object();\n        object.id = this.id;\n        object.parent = this.parent;\n\n        var index = table_params.length;\n        table_params[index] = object;\n      }\n    );\n\n    jQuery.each(\n      jQuery(\"#jstree_files_container\").jstree(\"get_checked\", true),\n      function () {\n        //console.log(this.id+\"-\"+this.parent);\n\n        var object = new Object();\n        object.id = this.id;\n        object.parent = this.parent;\n\n        var index = files_params.length;\n        files_params[index] = object;\n      }\n    );\n\n    var $return = new Object();\n    $return.table_params = table_params;\n    $return.files_params = files_params;\n    $return.backup_params = jQuery(\"#generate_backup_form\").serializeArray();\n\n    return $return;\n  }\n\n  do_backup_database_callback(elem, action, json) {\n    if (json.extra) this.params.extra = json.extra;\n\n    if (json.extra.stats) {\n      if (json.extra.stats.tables_count !== undefined) {\n        jQuery(elem)\n          .find(\".table-counter\")\n          .text(parseInt(json.extra.stats.tables_count));\n      }\n\n      if (json.extra.stats.database_count !== undefined) {\n        jQuery(elem)\n          .find(\".database-counter\")\n          .text(parseInt(json.extra.stats.database_count));\n      }\n\n      if (json.extra.stats.total_records !== undefined) {\n        jQuery(elem)\n          .find(\".total-records\")\n          .text(parseInt(json.extra.stats.total_records));\n      }\n    }\n\n    if (json.extra.tableName) {\n      jQuery(elem)\n        .find(\".last-logged-table\")\n        .text(\n          json.extra.databaseName +\n            \".\" +\n            json.extra.tableName +\n            \" (\" +\n            json.extra.processedRecords +\n            \" records)\"\n        );\n    }\n\n    if (\n      json.extra.processedRecords !== undefined &&\n      !json.extra.startAtRecord &&\n      !json.extra.endDump\n    ) {\n      var records =\n        parseInt(jQuery(elem).find(\".total-records\").attr(\"data-processed\")) +\n        parseInt(json.extra.processedRecords);\n\n      var percent =\n        (100 * parseInt(records)) /\n        parseInt(jQuery(elem).find(\".total-records\").text());\n      jQuery(elem)\n        .find(\".progress .determinate\")\n        .css(\"width\", percent + \"%\");\n\n      jQuery(elem).find(\".total-records\").attr(\"data-processed\", records);\n      jQuery(elem)\n        .find(\".status-body ul.logged-tables\")\n        .prepend(\n          jQuery(\"<li>\").text(\n            json.extra.databaseName +\n              \".\" +\n              json.extra.tableName +\n              \" (\" +\n              json.extra.processedRecords +\n              \" records)\"\n          )\n        );\n    }\n\n    if (json.extra.dumpfile !== undefined) {\n      var db_text =\n        json.extra.dumpfile +\n        \" (\" +\n        this.getSize(json.extra.dumpsize, 1024) +\n        \" KB)\";\n\n      if (!jQuery(this.last_dumpfile).hasClass(json.extra.dumpfile)) {\n        this.last_dumpfile = jQuery(\"<li>\")\n          .addClass(json.extra.dumpfile)\n          .html(db_text)\n          .prependTo(\"ul.logged-databases\");\n      } else {\n        jQuery(this.last_dumpfile).html(db_text);\n      }\n    }\n\n    if (!json.finished /*&& !this.cancel*/) {\n      this.do_ajax(elem, action);\n      return false;\n    }\n\n    jQuery(elem).find(\".last-logged-table\").text(\"done\");\n    jQuery(elem).find(\".progress .determinate\").css(\"width\", \"100%\");\n\n    this.do_backup_files();\n  }\n\n  do_backup_database() {\n    if (!jQuery(\"#jstree_database_container\").length) {\n      this.do_backup_files();\n      return;\n    }\n\n    /*if(this.cancel)\n            return false;*/\n\n    var elem = \"#generate_backup ul.backup-status li.database-backup\";\n    jQuery(elem).show();\n    //jQuery(elem + ' .status-body').show();\n\n    jQuery(elem).find(\".collapsible-header\").trigger(\"click\");\n\n    jQuery(elem).find(\".total-records\").text(0);\n    jQuery(elem).find(\".total-records\").attr(\"data-processed\", 0);\n    jQuery(elem).find(\".table-counter\").text(0);\n    jQuery(elem).find(\".database-counter\").text(0);\n    jQuery(elem).find(\".logged-databases\").html(\"\");\n    jQuery(elem).find(\".logged-tables\").html(\"\");\n\n    this.last_dumpfile = 0;\n\n    jQuery(elem).find(\".progress .determinate\").css(\"width\", \"0%\");\n\n    this.do_ajax(elem, \"backup_database\", 1);\n  }\n\n  do_scan_filesystem_callback(elem, action, json) {\n    if (json.total_files_num) {\n      jQuery(\".file-system .file-counter\").text(\n        parseInt(json.total_files_num) +\n          parseInt(jQuery(\".file-system .file-counter\").text())\n      );\n    }\n\n    if (json.total_files_size) {\n      var size =\n        parseFloat(json.total_files_size) +\n        parseFloat(jQuery(\".file-system .file-size-total\").text());\n      jQuery(\".file-system .file-size-total\").text(size.toFixed(2));\n    }\n\n    if (json.last_logged_file) {\n      jQuery(\".file-system .last-logged-file\").text(json.last_logged_file);\n    }\n\n    if (!json.finished /*&& !this.cancel*/) {\n      this.do_ajax(elem, action);\n      return false;\n    }\n\n    //finished\n    jQuery(elem)\n      .find(\".progress .indeterminate\")\n      .removeClass(\"indeterminate\")\n      .addClass(\"determinate\")\n      .css(\"width\", \"100%\");\n    jQuery(\".file-system .last-logged-file\").text(\"done\");\n\n    //this.do_backup_database();\n    this.do_backup_database();\n  }\n\n  do_scan_filesystem() {\n    /*if(this.cancel)\n            return false;*/\n\n    var elem = \"#generate_backup ul.backup-status li.file-system\";\n    jQuery(elem).show();\n    jQuery(elem + \" .status-body\").show();\n    jQuery(elem).find(\".collapsible-header\").trigger(\"click\");\n\n    jQuery(\".file-system .file-counter\").text(0);\n    jQuery(\".file-system .last-logged-file\").text(\"\");\n    jQuery(\".file-system .file-size-total\").text(0);\n    jQuery(\".file-system .progress div\")\n      .removeClass(\"determinate\")\n      .addClass(\"indeterminate\")\n      .css(\"width\", \"0%\");\n\n    this.do_ajax(elem, \"scan_filesystem\", 1);\n  }\n\n  do_backup_files_callback(elem, action, json) {\n    /*if(this.cancel)\n            return false;*/\n\n    if (json.extra) {\n      this.params.extra = json.extra;\n    }\n\n    if (json.extra) {\n      if (json.extra.start_at_line !== undefined) {\n        jQuery(elem)\n          .find(\".file-counter\")\n          .text(parseInt(json.extra.start_at_line));\n      }\n\n      if (json.extra.start_at_line !== undefined) {\n        //var prev_backup_size = parseInt(jQuery(elem).find(\".file-size-total\").attr('data-processed'));\n        jQuery(elem)\n          .find(\".file-size-total\")\n          .text(\n            this.getSize(\n              this.backup_size_total + parseInt(json.extra.backup_size)\n            )\n          );\n        //var backup_size = parseInt(json.extra.backup_size);\n      }\n    }\n\n    if (json.extra.processed_file) {\n      if (json.extra.start_at_byte !== undefined && json.extra.start_at_byte) {\n        var processed_size = json.extra.start_at_byte;\n      } else {\n        var processed_size = json.extra.processed_file_size;\n      }\n\n      jQuery(elem)\n        .find(\".last-logged-file\")\n        .text(\n          json.extra.processed_file +\n            \" (\" +\n            this.getSize(processed_size, 1024) +\n            \" KB)\"\n        );\n    }\n\n    if (json.extra.processed_file !== undefined) {\n      var backup_text =\n        json.extra.backup_archive_name_full +\n        \" (\" +\n        this.getSize(json.extra.backup_size) +\n        \") MB\";\n\n      if (this.backup_part != json.extra.backup_part) {\n        this.backup_part = json.extra.backup_part;\n        this.backup_size_total =\n          this.backup_size_total + json.extra.backup_size;\n      }\n\n      if (\n        !jQuery(this.last_backup_file).hasClass(json.extra.backup_archive_name)\n      ) {\n        this.last_backup_file = jQuery(\"<li>\")\n          .addClass(json.extra.backup_archive_name)\n          .html(backup_text)\n          .prependTo(jQuery(elem).find(\".status-body .backup-name\"));\n      }\n\n      jQuery(this.last_backup_file).html(backup_text);\n    }\n\n    if (json.extra.lines_total) {\n      var percent =\n        (100 * parseInt(json.extra.start_at_line)) /\n        parseInt(json.extra.lines_total);\n      jQuery(elem)\n        .find(\".progress .determinate\")\n        .css(\"width\", percent + \"%\");\n    }\n\n    if (!json.finished /*&& !this.cancel*/) {\n      this.do_ajax(elem, action);\n      return false;\n    }\n\n    jQuery(elem).find(\".last-logged-file\").text(\"done\");\n    jQuery(\".backup-done .cloud-upload\").attr(\n      \"href\",\n      \"#\" + json.extra.backup_parent\n    );\n    jQuery(\".backup-done .download\").attr(\n      \"href\",\n      \"#\" + json.extra.backup_parent\n    );\n    jQuery(\".backup-done .list-backup-content\").attr(\n      \"href\",\n      \"#\" + json.extra.backup_parent\n    );\n\n    //if (jQuery(\"#backup_options #backup_encrypt\").is(\":checked\")) {\n    if (this.do_backup_encryption()) {\n      return;\n    }\n\n    if (this.do_remote_storage_upload(json.extra.backup_parent)) {\n      return;\n    }\n\n    //this.restart_backup();\n    this.do_backup_done(json.extra.backup_parent);\n  }\n\n  do_backup_files() {\n    if (this.cancel) return false;\n\n    var elem = \"#generate_backup ul.backup-status li.files-backup\";\n    jQuery(elem).show();\n    jQuery(elem + \" .status-body\").show();\n    jQuery(elem).find(\".collapsible-header\").trigger(\"click\");\n\n    jQuery(elem).find(\".file-size-total\").text(0);\n    jQuery(elem).find(\".file-size-total\").attr(\"data-processed\", 0);\n    jQuery(elem).find(\".file-counter\").text(0);\n    jQuery(elem).find(\".last-logged-file\").text(\"\");\n\n    jQuery(elem).find(\".progress .determinate\").css(\"width\", \"0%\");\n\n    this.do_ajax(elem, \"backup_files\", 1);\n  }\n\n  do_backup_encryption_callback(elem, action, response) {\n    if (response.extra) {\n      this.params.extra = response.extra;\n    }\n\n    jQuery(\".backup-encryption .last-logged-file\").text(\n      \"encrypting \" + response.processing_file + \" ...\"\n    );\n\n    if (response.total_size !== undefined) {\n      jQuery(\".backup-encryption .progress > div\")\n        .removeClass(\"indeterminate\")\n        .addClass(\"determinate\");\n      var percent =\n        parseInt(response.start * 100) / parseInt(response.total_size);\n      jQuery(\".backup-encryption .progress .determinate\").css(\n        \"width\",\n        parseInt(percent) + \"%\"\n      );\n    }\n\n    if (response.error) {\n      jQuery(\".backup-encryption .status-body\").show();\n      jQuery(\".backup-encryption .status-body\")\n        .addClass(\"error\")\n        .prepend(response.message + \" \");\n      jQuery(\".backup-encryption .progress > div\")\n        .addClass(\"determinate\")\n        .removeClass(\"indeterminate\")\n        .css(\"width\", \"100%\");\n      return;\n    }\n\n    if (!response.finished /*&& !this.cancel*/) {\n      this.do_ajax(elem, action);\n      return false;\n    }\n\n    //finished\n    jQuery(elem).find(\".progress > div\").css(\"width\", \"100%\");\n    jQuery(\".backup-encryption .last-logged-file\").text(\"done\");\n\n    //this.do_backup_database();\n    if (this.do_remote_storage_upload(response.processing_file)) {\n      return;\n    }\n\n    this.do_backup_done(response.processing_file);\n  }\n\n  do_backup_encryption() {\n    if (this.cancel) {\n      return false;\n    }\n\n    if (!jQuery(\"#backup_options #backup_encrypt\").is(\":checked\")) {\n      return false;\n    }\n\n    var elem = \"#generate_backup ul.backup-status li.backup-encryption\";\n    jQuery(elem).show();\n    jQuery(elem + \" .status-body\").show();\n    jQuery(elem).find(\".collapsible-header\").trigger(\"click\");\n\n    jQuery(elem).find(\".progress .determinate\").removeClass('determinate').addClass('indeterminate');\n\n    this.do_ajax(elem, \"backup_encryption\", 1);\n\n    return true;\n  }\n\n  do_upload_backup_to_remote_callback(elem, action, response) {\n\n    if(!response || response.error) {\n        jQuery(elem).find('.status').text(response.message);\n        jQuery(elem).find(\".progress .indeterminate\").removeClass('indeterminate').addClass('determinate').css(\"width\", \"0%\");\n    }else{\n        jQuery(elem).find('.status').text('done');\n        jQuery(elem).find(\".progress .indeterminate\").removeClass('indeterminate').addClass('determinate').css(\"width\", \"100%\");\n    }\n\n    this.do_backup_done();\n  }\n\n  do_remote_storage_upload(backup_name) {\n    if (this.cancel) {\n      return false;\n    }\n\n    var remote_storage = jQuery(\"#schedule_storage\").val();\n\n    if (!remote_storage) {\n      return false;\n    }\n\n    var delete_backup_after_transfer = Number(\n      jQuery(\"#backup_delete_after_remote_transfer\").is(\":checked\")\n    );\n\n    jQuery(\"#remote_storage_modal #transfer_storage\").val(remote_storage);\n\n    var elem = \"#generate_backup ul.backup-status li.remote-storage-transfer\";\n    jQuery(elem).show();\n    jQuery(elem + \" .status-body\").show();\n    jQuery(elem).find(\".collapsible-header\").trigger(\"click\");\n\n    jQuery(elem).find(\".progress .determinate\").removeClass('determinate').addClass('indeterminate');\n\n    this.params.file =backup_name;\n    this.params.storage_type= remote_storage;\n    this.params.delete_after_transfer= delete_backup_after_transfer;\n\n    this.do_ajax(elem, \"upload_backup_to_remote\", 1);\n\n    return true;\n  }\n\n  do_backup_done(backup_name) {\n    var elem = \"#generate_backup ul.backup-status li.backup-done\";\n    jQuery(elem).show();\n    jQuery(elem + \" .status-body\").show();\n    jQuery(elem).find(\".collapsible-header\").trigger(\"click\");\n\n    this.set_cancel(false);\n    jQuery(\"#generate_backup .action-buttons a\").hide();\n    jQuery(\"#generate_backup .action-buttons .start\").css(\n      \"display\",\n      \"inline-block\"\n    );\n  }\n\n  do_save_schedule_callback(elem, action, json) {\n    jQuery(\"#schedule_backup_success\").show();\n  }\n\n  cancel_backup() {\n    this.set_cancel(true);\n    jQuery(\"#generate_backup .action-buttons a\").hide();\n    jQuery(\"#generate_backup .action-buttons .start\").css(\n      \"display\",\n      \"inline-block\"\n    );\n    jQuery(\"#generate_backup .action-buttons .restart\").css(\n      \"display\",\n      \"inline-block\"\n    );\n\n    //this.restart_backup();\n  }\n\n  restart_backup() {\n    this.set_cancel(false);\n\n    jQuery(\"#generate_backup .action-buttons a\").hide();\n    jQuery(\"#generate_backup .action-buttons .cancel\").css(\n      \"display\",\n      \"inline-block\"\n    );\n\n    if (this.resume.action) {\n      //console.log(this.resume.action)\n      this.do_ajax(this.resume.elem, this.resume.action, this.resume.params);\n      this.resume = new Object();\n      return;\n    }\n\n    this.start_backup();\n  }\n\n  start_backup() {\n    this.resume = new Object();\n    this.set_cancel(false);\n    jQuery(\"#generate_backup .action-buttons a\").hide();\n    jQuery(\"#generate_backup .action-buttons .cancel\").css(\n      \"display\",\n      \"inline-block\"\n    );\n\n    this.generate_hash = true;\n    //this.cancel =  false;\n    this.backup_size_total = 0;\n    this.last_backup_file = \"\";\n    this.backup_part = 0;\n    jQuery(\"#generate_backup ul.backup-name li\").remove();\n\n    jQuery(\"#generate_backup ul.backup-status > li\").hide();\n    jQuery(\"#generate_backup .backup-status\").show();\n\n    this.params = this.get_form_params();\n\n    this.do_scan_filesystem();\n  }\n\n  set_cancel(status) {\n    if (status) {\n      //document.dispatchEvent(new CustomEvent(\"xcloner_restore_update_progress\", {detail: {percent: 0, class: 'determinate' }}));\n      //jQuery(\"#generate_backup .collapsible-header.active .progress > div\").add\n    }\n    this.cancel = status;\n  }\n\n  get_cancel(status) {\n    return this.cancel;\n  }\n\n  init_resume(elem, action, init) {\n    this.resume.elem = elem;\n    this.resume.action = action;\n    this.resume.init = init;\n  }\n\n  /** global: XCLONER_AJAXURL */\n  do_ajax(elem, action, init = 0) {\n    \n    let hash = \"\";\n\n    if (this.params.hash !== undefined) hash = this.params.hash;\n    else if (this.generate_hash) hash = \"generate_hash\";\n\n    if (this.cancel == true) {\n      this.init_resume(elem, action, init);\n      return;\n    }\n\n    var callback = \"do_\" + action + \"_callback\";\n    var data = JSON.stringify(this.params);\n    var $this = this;\n\n    jQuery\n      .ajax({\n        url: XCLONER_AJAXURL,\n        dataType: \"json\",\n        type: \"POST\",\n        data: {\n          action: action,\n          data: data,\n          init: init,\n          hash: hash,\n          API_ID: ID(),\n        },\n        error: function (err) {\n          show_ajax_error(\"Communication Error\", \"\", err);\n          $this.init_resume(elem, action, init);\n          //console.log(err);\n        },\n      })\n      .done(function (json) {\n        if (json.hash) {\n          $this.params.hash = json.hash;\n          //console.log(json.hash);\n        }\n        if (json.error !== undefined) {\n          show_ajax_error(\"Communication Error\", \"\", json.error_message);\n          $this.init_resume(elem, action, init);\n          return;\n        }\n\n        $this.resume = new Object();\n\n        $this[callback](elem, action, json);\n      });\n  }\n\n  getSize(bytes, conv = 1024 * 1024) {\n    return (bytes / conv).toFixed(2);\n  }\n}\n\n\n//# sourceURL=webpack:///./admin/js/xcloner-backup-class.js?");

/***/ }),

/***/ "./admin/js/xcloner-manage-backups-class.js":
/*!**************************************************!*\
  !*** ./admin/js/xcloner-manage-backups-class.js ***!
  \**************************************************/
/*! exports provided: Xcloner_Manage_Backups */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Xcloner_Manage_Backups\", function() { return Xcloner_Manage_Backups; });\n/* harmony import */ var _xcloner_admin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xcloner-admin.js */ \"./admin/js/xcloner-admin.js\");\n/** global: XCLONER_AJAXURL */\n/** global: Materialize */\n\n\nvar backup_cotent_modal;\nvar backup_encryption_modal;\nvar backup_decryption_modal;\nvar remote_storage_modal;\nvar local_storage_upload_modal;\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var Modalelem = document.querySelector(\"#backup_cotent_modal\");\n  backup_cotent_modal = M.Modal.init(Modalelem);\n\n  var Modalelem = document.querySelector(\"#backup_encryption_modal\");\n  backup_encryption_modal = M.Modal.init(Modalelem);\n\n  var Modalelem = document.querySelector(\"#backup_decryption_modal\");\n  backup_decryption_modal = M.Modal.init(Modalelem);\n\n  var Modalelem = document.querySelector(\"#remote_storage_modal\");\n  remote_storage_modal = M.Modal.init(Modalelem);\n  \n  var Modalelem = document.querySelector(\"#local_storage_upload_modal\");\n  local_storage_upload_modal = M.Modal.init(Modalelem);\n  \n});\n\nclass Xcloner_Manage_Backups {\n  constructor() {\n    this.file_counter = 0;\n    this.storage_selection = \"\";\n    this.dataTable = \"\";\n    //this.edit_modal = jQuery('.modal').modal();\n  }\n\n  download_backup_by_name(id) {\n    window.open(XCLONER_AJAXURL + \"&action=download_backup_by_name&name=\" + id+\"&storage_selection=\"+this.storage_selection);\n    return false;\n  }\n\n  delete_backup_by_name(id, elem, dataTable) {\n    var $this = this;\n\n    if (id) {\n      jQuery.ajax({\n        url: XCLONER_AJAXURL,\n        method: \"post\",\n        data: {\n          action: \"delete_backup_by_name\",\n          name: id,\n          storage_selection: this.storage_selection,\n        },\n        success: function (response) {\n          if (response.finished) {\n            dataTable.row(jQuery(elem).parents(\"tr\")).remove().draw();\n          } else {\n            alert(\"There was an error deleting the file\");\n          }\n        },\n        dataType: \"json\",\n      });\n    }\n  }\n\n  list_backup_content_callback(backup_file, start = 0, part = 0) {\n    var $this = this;\n\n    if (backup_file) {\n      jQuery.ajax({\n        url: XCLONER_AJAXURL,\n        method: \"post\",\n        data: {\n          action: \"list_backup_files\",\n          file: backup_file,\n          start: start,\n          part: part,\n        },\n        success: function (response) {\n          if (response.error) {\n            jQuery(\"#backup_cotent_modal .files-list\")\n              .addClass(\"error\")\n              .prepend(response.message);\n            jQuery(\"#backup_cotent_modal .progress > div\")\n              .addClass(\"determinate\")\n              .removeClass(\".indeterminate\")\n              .css(\"width\", \"100%\");\n            return;\n          }\n\n          var files_text = [];\n\n          for (var i in response.files) {\n            if (response.total_size !== undefined) {\n              var percent =\n                parseInt(response.start * 100) / parseInt(response.total_size);\n              //jQuery(\"#backup_cotent_modal .progress .determinate\").css('width', percent + \"%\")\n            }\n\n            $this.file_counter++;\n\n            files_text[i] =\n              \"<li>\" +\n              ($this.file_counter +\n                \". <span title='\" +\n                response.files[i].mtime +\n                \"'>\" +\n                response.files[i].path +\n                \"</span> (\" +\n                response.files[i].size +\n                \" bytes)\") +\n              \"</li>\";\n          }\n\n          jQuery(\"#backup_cotent_modal .modal-content .files-list\").prepend(\n            files_text.reverse().join(\"\\n\")\n          );\n\n          if (\n            !response.finished &&\n            jQuery(\"#backup_cotent_modal\").is(\":visible\")\n          ) {\n            $this.list_backup_content_callback(\n              backup_file,\n              response.start,\n              response.part\n            );\n          } else {\n            jQuery(\"#backup_cotent_modal .progress > div\")\n              .addClass(\"determinate\")\n              .removeClass(\".indeterminate\")\n              .css(\"width\", \"100%\");\n          }\n        },\n        error: function (xhr, textStatus, error) {\n          jQuery(\"#backup_cotent_modal .files-list\")\n            .addClass(\"error\")\n            .prepend(textStatus + error);\n        },\n        dataType: \"json\",\n      });\n    }\n  }\n\n  list_backup_content(backup_file) {\n    this.file_counter = 0;\n    jQuery(\"#backup_cotent_modal .modal-content .files-list\")\n      .text(\"\")\n      .removeClass(\"error\");\n    jQuery(\"#backup_cotent_modal .modal-content .backup-name\").text(\n      backup_file\n    );\n    backup_cotent_modal.open();\n    jQuery(\"#backup_cotent_modal .progress > div\")\n      .removeClass(\"determinate\")\n      .addClass(\"indeterminate\");\n\n    this.list_backup_content_callback(backup_file);\n  }\n\n  backup_encryption_callback(backup_file, start = 0, part = 0, iv = 0) {\n    var $this = this;\n\n    if (backup_file) {\n      jQuery.ajax({\n        url: XCLONER_AJAXURL,\n        method: \"post\",\n        data: {\n          action: \"backup_encryption\",\n          file: backup_file,\n          start: start,\n          part: part,\n          iv: iv,\n        },\n        success: function (response) {\n          if (response.total_size !== undefined) {\n            jQuery(\"#backup_encryption_modal .progress > div\")\n              .removeClass(\"indeterminate\")\n              .addClass(\"determinate\");\n            var percent =\n              parseInt(response.start * 100) / parseInt(response.total_size);\n            jQuery(\"#backup_encryption_modal .progress .determinate\").css(\n              \"width\",\n              parseInt(percent) + \"%\"\n            );\n            jQuery(\"#backup_encryption_modal .modal-content .files-list\").text(\n              \"Encrypting \" +\n                response.processing_file +\n                \" \" +\n                parseInt(percent) +\n                \"%\"\n            );\n          }\n\n          if (response.error) {\n            jQuery(\"#backup_encryption_modal .notice\").show();\n            jQuery(\"#backup_encryption_modal .files-list\")\n              .addClass(\"error\")\n              .prepend(response.message + \" \");\n            jQuery(\"#backup_encryption_modal .progress > div\")\n              .addClass(\"determinate\")\n              .removeClass(\"indeterminate\")\n              .css(\"width\", \"100%\");\n            return;\n          }\n\n          if (\n            !response.finished &&\n            jQuery(\"#backup_encryption_modal\").is(\":visible\")\n          ) {\n            $this.backup_encryption_callback(\n              backup_file,\n              response.start,\n              response.part,\n              response.iv\n            );\n          } else {\n            jQuery(\"#backup_encryption_modal .progress > div\")\n              .addClass(\"determinate\")\n              .removeClass(\"indeterminate\")\n              .css(\"width\", \"100%\");\n            jQuery(\"#backup_encryption_modal .modal-content .files-list\").text(\n              \"Done Encrypting.\"\n            );\n            dataTable.ajax.reload();\n          }\n        },\n        error: function (xhr, textStatus, error) {\n          jQuery(\"#backup_encryption_modal .files-list\")\n            .addClass(\"error\")\n            .prepend(textStatus + error);\n        },\n        dataType: \"json\",\n      });\n    }\n  }\n\n  backup_encryption(backup_file, start = 0) {\n    this.file_counter = 0;\n\n    jQuery(\"#backup_encryption_modal .modal-content .backup-name\").text(\n      backup_file\n    );\n    backup_encryption_modal.open();\n    jQuery(\"#backup_encryption_modal .progress > div\");\n    jQuery(\"#backup_encryption_modal .notice\").show();\n\n    jQuery(\"#backup_encryption_modal a.btn\").attr(\n      \"onclick\",\n      \"xcloner_manage_backups.backup_encryption('\" +\n        backup_file +\n        \"', true)\"\n    );\n    jQuery(\"#backup_encryption_modal .modal-content .files-list\")\n      .text(\"\")\n      .removeClass(\"error\");\n\n    if (start) {\n      jQuery(\"#backup_encryption_modal .notice\").hide();\n      this.backup_encryption_callback(backup_file);\n    }\n  }\n\n  backup_decryption_callback(backup_file, start = 0, part = 0, iv = 0) {\n    var $this = this;\n\n    var decryption_key = jQuery(\n      \"#backup_decryption_modal #decryption_key\"\n    ).val();\n\n    if (backup_file) {\n      jQuery.ajax({\n        url: XCLONER_AJAXURL,\n        method: \"post\",\n        data: {\n          action: \"backup_decryption\",\n          file: backup_file,\n          start: start,\n          part: part,\n          iv: iv,\n          decryption_key: decryption_key,\n        },\n        success: function (response) {\n          if (!response.start) {\n            response.start = 0;\n          }\n          if (response.total_size !== undefined) {\n            jQuery(\"#backup_decryption_modal .progress > div\")\n              .removeClass(\"indeterminate\")\n              .addClass(\"determinate\");\n            var percent =\n              parseInt(response.start * 100) / parseInt(response.total_size);\n            jQuery(\"#backup_decryption_modal .progress .determinate\").css(\n              \"width\",\n              parseInt(percent) + \"%\"\n            );\n            jQuery(\"#backup_decryption_modal .modal-content .files-list\").text(\n              \"Decrypting \" +\n                response.processing_file +\n                \" \" +\n                parseInt(percent) +\n                \"%\"\n            );\n          }\n\n          if (response.error) {\n            jQuery(\"#backup_decryption_modal .files-list\")\n              .addClass(\"error\")\n              .prepend(response.message + \" \");\n            jQuery(\"#backup_decryption_modal .progress > div\")\n              .addClass(\"determinate\")\n              .removeClass(\"indeterminate\")\n              .css(\"width\", \"100%\");\n            jQuery(\"#backup_decryption_modal .notice\").show();\n            return;\n          }\n\n          if (\n            !response.finished &&\n            jQuery(\"#backup_decryption_modal\").is(\":visible\")\n          ) {\n            $this.backup_decryption_callback(\n              backup_file,\n              response.start,\n              response.part,\n              response.iv\n            );\n          } else {\n            jQuery(\"#backup_decryption_modal .progress > div\")\n              .addClass(\"determinate\")\n              .removeClass(\"indeterminate\")\n              .css(\"width\", \"100%\");\n            jQuery(\"#backup_decryption_modal .modal-content .files-list\").text(\n              \"Done Decrypting.\"\n            );\n            dataTable.ajax.reload();\n          }\n        },\n        error: function (xhr, textStatus, error) {\n          jQuery(\"#backup_decryption_modal .files-list\")\n            .addClass(\"error\")\n            .prepend(textStatus + error);\n        },\n        dataType: \"json\",\n      });\n    }\n  }\n\n  backup_decryption(backup_file, start = 0) {\n    this.file_counter = 0;\n\n    jQuery(\"#backup_decryption_modal .modal-content .backup-name\").text(\n      backup_file\n    );\n    backup_decryption_modal.open();\n    jQuery(\"#backup_decryption_modal .progress > div\");\n    jQuery(\"#backup_decryption_modal .notice\").show();\n\n    jQuery(\"#backup_decryption_modal a.btn\").attr(\n      \"onclick\",\n      \"xcloner_manage_backups.backup_decryption('\" +\n        backup_file +\n        \"', true)\"\n    );\n    jQuery(\"#backup_decryption_modal .modal-content .files-list\")\n      .text(\"\")\n      .removeClass(\"error\");\n\n    if (start) {\n      jQuery(\"#backup_decryption_modal .notice\").hide();\n      this.backup_decryption_callback(backup_file);\n    }\n  }\n\n  cloud_upload(backup_file, delete_after_transfer) {\n    delete_after_transfer = delete_after_transfer || 0;\n\n    jQuery(\"#remote_storage_modal\").find(\".backup_name\").text(backup_file);\n    jQuery(\"#remote_storage_modal\").find(\"input.backup_name\").val(backup_file);\n    M.updateTextFields();\n    jQuery(\".col select\").formSelect();\n    remote_storage_modal.open();\n    jQuery(\"#remote_storage_modal .status\").hide();\n\n    jQuery(\".remote-storage-form\")\n      .off(\"submit\")\n      .on(\"submit\", function () {\n        jQuery(\"#remote_storage_modal .status\").show();\n        jQuery(\"#remote_storage_modal .status .progress .indeterminate\")\n          .removeClass(\"determinate\")\n          .css(\"width\", \"0%\");\n        jQuery(\"#remote_storage_modal .status-text\")\n          .removeClass(\"error\")\n          .text(\"\");\n\n        var storage_type = jQuery(\"#remote_storage_modal select\").val();\n\n        if (backup_file) {\n          jQuery.ajax({\n            url: XCLONER_AJAXURL,\n            method: \"post\",\n            data: {\n              action: \"upload_backup_to_remote\",\n              file: backup_file,\n              storage_type: storage_type,\n              delete_after_transfer: delete_after_transfer,\n            },\n            success: function (response) {\n              if (response.error) {\n                jQuery(\"#remote_storage_modal .status-text\")\n                  .addClass(\"error\")\n                  .text(response.message);\n              } else {\n                jQuery(\"#remote_storage_modal .status-text\")\n                  .removeClass(\"error\")\n                  .text(\"done\");\n              }\n\n              jQuery(\"#remote_storage_modal .status .progress .indeterminate\")\n                .addClass(\"determinate\")\n                .css(\"width\", \"100%\");\n            },\n            error: function (xhr, textStatus, error) {\n              jQuery(\"#remote_storage_modal .status-text\")\n                .addClass(\"error\")\n                .text(textStatus + error);\n            },\n            dataType: \"json\",\n          });\n        }\n\n        return false;\n      });\n  }\n\n  copy_remote_to_local(backup_file) {\n    local_storage_upload_modal.open();\n    jQuery(\"#local_storage_upload_modal .modal-content .backup-name\").text(\n      backup_file\n    );\n    jQuery(\"#local_storage_upload_modal .status-text\")\n      .removeClass(\"error\")\n      .text(\"\");\n    jQuery(\"#local_storage_upload_modal .status .progress .indeterminate\")\n      .removeClass(\"determinate\")\n      .css(\"width\", \"0%\");\n\n    if (backup_file) {\n      jQuery.ajax({\n        url: XCLONER_AJAXURL,\n        method: \"post\",\n        data: {\n          action: \"copy_backup_remote_to_local\",\n          file: backup_file,\n          storage_type: this.storage_selection,\n        },\n        success: function (response) {\n          if (response.error) {\n            jQuery(\"#local_storage_upload_modal .status-text\")\n              .addClass(\"error\")\n              .text(response.message);\n          } else {\n            jQuery(\"#local_storage_upload_modal .status-text\")\n              .removeClass(\"error\")\n              .text(\"done\");\n          }\n\n          jQuery(\"#local_storage_upload_modal .status .progress .indeterminate\")\n            .addClass(\"determinate\")\n            .css(\"width\", \"100%\");\n        },\n        error: function (xhr, textStatus, error) {\n          jQuery(\"#local_storage_upload_modal .status-text\")\n            .addClass(\"error\")\n            .text(textStatus + error);\n        },\n        dataType: \"json\",\n      });\n    }\n  }\n\n  //end class\n}\n\n\n\n//# sourceURL=webpack:///./admin/js/xcloner-manage-backups-class.js?");

/***/ }),

/***/ "./admin/js/xcloner-remote-storage-class.js":
/*!**************************************************!*\
  !*** ./admin/js/xcloner-remote-storage-class.js ***!
  \**************************************************/
/*! exports provided: Xcloner_Remote_Storage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Xcloner_Remote_Storage\", function() { return Xcloner_Remote_Storage; });\nclass Xcloner_Remote_Storage {\n  constructor() {}\n\n  /** global: XCLONER_AJAXURL */\n  toggle_status(elem) {\n    var field = jQuery(elem).attr(\"name\");\n    var value = 0;\n    if (jQuery(elem).is(\":checked\")) {\n      value = 1;\n    }\n\n    if (field) {\n      jQuery.ajax({\n        url: XCLONER_AJAXURL,\n        method: \"post\",\n        data: { action: \"remote_storage_save_status\", id: field, value: value },\n        success: function (response) {\n          if (!response.finished) {\n            alert(\"Error changing status\");\n          }\n        },\n        dataType: \"json\",\n      });\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///./admin/js/xcloner-remote-storage-class.js?");

/***/ })

/******/ });